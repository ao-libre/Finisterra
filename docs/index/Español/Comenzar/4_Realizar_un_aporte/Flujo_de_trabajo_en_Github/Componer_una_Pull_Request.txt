Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-11-11T21:26:51-03:00

====== Componer una Pull Request ======

===== Plantilla para el editor de Github =====
Luego de crear la rama, los cambios y pushear la rama al repositorio, tendremos que asignar información para que el resto del equipo pueda analizar el cambio. 
Mientras más información sea declara, más sencilla será la tarea de aprobación o modificación. Los campos que vamos asignar son:
**Titulo:** Un titulo claro conciso, solo queda registrado en los PullRequest, este título no se integra al historial del repositorio.
**Descripción:** 
	**Descripción:** Brindamos información de como llegamos a crear la Pull request
	**Funcionamiento:** Brindamos información del funcionamiento de los cambios
	**Notas:** Asignamos todo aquello que este relacionado con este pull request
**Assignees:** Si quieres asignarlo a otro colaborador para su realización
**Labels:** Etiquetas que resultan muy útiles para filtrar en el listado.
**Projects:** Si el pull requets corresponde a un proyecto 
**Milestone:** Se usa muy poco, corresponde a grandes eventos/cambios.

//Utilicemos este ejemplo para componer una pull request//

{{{code: lang="java" linenumbers="True"
Título: 
Selección de héroe aleatoria

Descripción: 
al entrar en una sala, la selección del héroe es aleatoria. Aún así, puede seleccionarse el héroe deseado al ingresar al servidor.

Funcionamiento:

	Se elimina el seteo del héroe al crear el jugador, dado que el concepto de héroe no debería aparecer hasta la sala (conceptualmente).
	Al entrar en la sala, se selecciona un héroe al azar.
	Luego El jugador puede elegir el héroe que quiera y se respetará al iniciar en el juego.

Nota: este pull request reemplaza #217 el cual fue tomado como base.
}}}



===== Instrucciones para crear el contenido de una pull request en armonía =====

==== Introducción ====
Una pull request puede ser integrada a la rama Master de tres formas distintas. Una integración Perfecta, podría considerarse aquella que se hace con un Merge, donde sus commits estan segmentados por cada cambio que se realiza y con títulos claros y concisos en ellos.
Si bien deseamos que así sea, no siempre podemos lograrlo, ya que, generalmente se agregan commit sobre el hilo del pull request y estos a veces deben ser testeados por otros colaboradores por lo cual, podemos ir para delante y atrás varias veces.
Si bien todo el registro se puede arreglar para que quede Perfecto, muchas veces la labor requiere de mucha energía que simplemente haciendo un Squash ahorra ese tiempo. 
Si los PR son específicos (aunque contenga muchos commits) un squash es lo óptimo, sin embargo si el pr es amplio y modifica varías cuestiones no sería lo recomendable. Más adelante veremos algunas sugerencias. Mientras tantos sigamos con estos ejemplos:

==== Merge ====
* Todos los commits tal cual fueron asignados por el colaborador son integrados. 

=== Ejemplo de un pr usado con Merge ===
https://github.com/ao-libre/ao-java/pull/224
{{../../../../../img/pr-to-merge.png?href=..%2F..%2F..%2F..%2F..%2Fimg%2Fpr-to-merge.png}}

==== Resultado del merge ====
{{../../../../../img/resultado-merger.png}}

==== Squash ====
* Convertimos todos los commits en uno solo y podemos editar el titulo y descripción final.

=== Ejemplo de un pr usado para Squash ===
https://github.com/ao-libre/ao-java/pull/193
{{../../../../../img/pr-to-squash.png}}

=== Resultado de un squash ===
{{../../../../../img/resultado-squash.png}}

==== Rebase ====
* Aceptamos ciertos commits del colaborador y otros los descartamos al integrar.

--------------------

Con esta introducción podremos comprender que nos importa la forma en que quedan registrados los cambios en el repositorio de manera que te ofrecemos las siguientes sugerencias:

* Es preferible hacer varios Pull Request con pequeños cambios a uno con muchos.
* Se lo más claro posible con el título de los commits y en las descripciones comenta todo lo posible.
* Crearemos nombres de rama asociados al asunto, puedes usar - o / (guiones o barras) para jerarquizar. Ej: interfaz/libro-hechizos
* En lo posible agrupamos las modificaciones que corresponden a un cambio(archivos) en un commit para organizar cada commit. 
	Cada commit hace una cuestión, evitar crear dos modificaciones en un commit, por ejemplo:
	{{../../../../../img/evitar-dos-cambios-en-un-commit.png}}
* Mantenemos actualizada la rama en el caso que el aporte demore en integrarse **git pull origin master**

import org.gradle.internal.jvm.Jvm

buildscript {
    ext {
        kotlin_version = '1.3.50'
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.onedaybeard.artemis:artemis-odb-gradle-plugin:2.2.0"
        classpath "net.onedaybeard.artemis:artemis-fluid-gradle-plugin:2.2.0"
    }
}

allprojects {
    apply plugin: "idea"
    apply plugin: "eclipse"
	
    group = 'Finisterra'
    version = '0.1.12'

    ext {
        appName = 'Finisterra'
        
        gdxVersion = '1.9.11-SNAPSHOT' //graphic library
        kryoVersion = '4.0.2' //object serialization api
        artemisVersion = '2.2.0'  //Artemis EntityCompomentSystem & Network manager (TCP/UDP)
        gdxAIVersion = '1.8.2' //artificial intelligence
		tinyfdVersion = '3.2.3'
		jupiterVersion = '5.5.2' //test used for cache to map
		guavaVersion = '28.1-jre' //collection types used for map information
		ini4jVersion = '0.5.4'
		kotlinxCoroutinesVersion = '1.3.2' //currently only used to scale images
		kaifu2xVersion = '0.4.0'
		reflectionsVersion = '0.9.11' //load indexed file information to reuse
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }
}

subprojects {

    apply plugin: "java-library"

    sourceCompatibility = JavaVersion.VERSION_12
    targetCompatibility = JavaVersion.VERSION_12

    tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	//options.compilerArgs << '-Xlint:unchecked'
	//options.deprecation = true
    }
}

configure(subprojects.findAll { it.name == 'server' || it.name == 'desktop' }) {
    
    apply plugin: "de.undercouch.download"
	
    ext {
        osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)
        jdkPath = Jvm.current().getJavaHome().path
	JPackagePath = "${rootDir}/JPackage"
        prebuiltJRE = "${rootDir}/JPackage/bundled-JRE"
        JPackageCompressed = osName.contains('windows') ? "jpackage.zip" : "jpackage.tar.gz"
    }

    // Downloads the JPackage binary and decompresses it.
    task downloadJPackage(type: Download) {

        if (osName.contains('windows')) {
            src 'https://download.java.net/java/early_access/jpackage/1/openjdk-14-jpackage+1-70_windows-x64_bin.zip'
        } else if (osName.contains('linux')) {
            src 'https://download.java.net/java/early_access/jpackage/1/openjdk-14-jpackage+1-70_linux-x64_bin.tar.gz'
        } else if (osName.contains('mac')) {
            src 'https://download.java.net/java/early_access/jpackage/1/openjdk-14-jpackage+1-70_osx-x64_bin.tar.gz'
        }

        dest(new File(JPackagePath, JPackageCompressed))
        overwrite(false)

        // We put it in a doLast{} block because otherwise it (the task) auto-executes.
        doLast {
            if (!file(JPackagePath.concat("/jdk-14")).exists()) {
                copy {

                    if (osName.contains('windows')) {
                        from zipTree("${JPackagePath}/${JPackageCompressed}")
                    } else {
                        from tarTree("${JPackagePath}/${JPackageCompressed}")
                    }
                    
                    into JPackagePath

                }
            }
        }

    }

    // creates a replacement runtime via jlink command (much smaller than JPackage. Up to 38MB)
    task jlink(type: Exec, dependsOn: downloadJPackage) {

        // Overwrite previous bundled jre.
        if (file(prebuiltJRE).exists()) {
            delete(file(prebuiltJRE))
        }

        commandLine = [
                jdkPath.concat("/bin/jlink"),
                '--module-path', jdkPath.concat("/jmods"),
                '--add-modules', 'java.base,java.desktop,jdk.unsupported,java.logging',
                '--strip-debug',
                '--no-header-files',
                '--no-man-pages',
                '--strip-native-commands',
                '--vm=server',
                '--compress=2',
                '--output', prebuiltJRE
        ] as List<String>

        doLast {
            // Some extra debloat.
            delete(file("${prebuiltJRE}/conf"))
            delete(file("${prebuiltJRE}/legal"))
            delete fileTree("${prebuiltJRE}/bin").matching { include "api*.dll" }
        }

    }
}
plugins {
    id 'application'
}

sourceSets {
    main.java.srcDirs = ["src/"]
    test.java.srcDirs = ["test/"]
    main.resources.srcDirs = ["resources/"] 
}

mainClassName = "server.ServerLauncher"

test {
    useJUnitPlatform()
    failFast = true

    testLogging {
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "short"

        // remove standard output/error logging from --info builds
        // by assigning only 'failed' and 'skipped' events
        info.events = ["failed", "skipped"]
    }
}

dependencies {
    implementation project(":shared")
	runtimeOnly group: "com.badlogicgames.gdx", name: "gdx-backend-lwjgl3", version: "$gdxVersion"
	implementation group: "com.badlogicgames.gdx", name: "gdx-backend-headless", version: "$gdxVersion"
	implementation group: "com.badlogicgames.gdx", name: "gdx-ai", version: "$gdxAIVersion"

	testImplementation group: "org.junit.jupiter", name: "junit-jupiter-api", version: "$jupiterVersion"
	testRuntimeOnly group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "$jupiterVersion"
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }

    manifest {
        attributes 'Main-Class': mainClassName
    }
}

// The run task added by the application plugin
// is also of type JavaExec.
tasks.withType(JavaExec) {
    // Assign all Java system properties from
    // the command line to the JavaExec task.
    systemProperties System.properties
    systemProperties.remove("java.endorsed.dirs")
}

dist.dependsOn classes

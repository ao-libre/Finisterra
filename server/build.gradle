apply plugin: 'application'

sourceSets.main.java.srcDirs = ["src/"]
sourceSets.test.java.srcDirs = ["test/"]
sourceSets.main.resources.srcDirs = ["resources/"]

mainClassName = "server.ServerLauncher"

test {
    useJUnitPlatform()
    failFast=true

    testLogging {
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "short"

        // remove standard output/error logging from --info builds
        // by assigning only 'failed' and 'skipped' events
        info.events = ["failed", "skipped"]
    }
}

dependencies {
    implementation project(":shared")
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-ai:$gdxAIVersion"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }

    manifest {
        attributes 'Main-Class': mainClassName
    }
}

// The run task added by the application plugin
// is also of type JavaExec.
tasks.withType(JavaExec) {
    // Assign all Java system properties from
    // the command line to the JavaExec task.
    systemProperties System.properties
}

dist.dependsOn classes

import org.gradle.internal.jvm.Jvm

plugins {
    id 'application'
}

sourceSets {
    main.java.srcDirs = ["src/"]
    main.resources.srcDirs = ["assets/"]
}

dependencies {
    api project(":client")
	api group: "com.badlogicgames.gdx", name: "gdx-backend-lwjgl3", version: "$gdxVersion"
	api group: "com.badlogicgames.gdx", name: "gdx-freetype-platform", version: "$gdxVersion", classifier: "natives-desktop"
}

mainClassName = "launcher.DesktopLauncher"

if (osName.contains('mac')) {
    run {
        jvmArgs += '-XstartOnFirstThread'
    }
}

task dist(type: Jar) {
	dependsOn classes
	from files(sourceSets.main.output.classesDirs)
	from configurations.compileClasspath
	from configurations.runtimeClasspath

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
	
	doLast {
		copy {
			from configurations.runtimeClasspath
			into("$buildDir/libs")
		}
	}
	
}

run.dependsOn(classes)

// Determine where the bundled application is going to be.
def releasePath = "${buildDir}/releases"

// creates application bundle (executable + runtime)
task bundle(type: Exec, dependsOn: [dist, jlink]) {

    // Overwrite previous bundled application.
    if (file(releasePath).exists()) {
        delete(file(releasePath))
    } else {
        file(releasePath).mkdirs()
    }

    def commands = [
            osName.contains('mac') ? JPackagePath.concat("/jdk-14.jdk/Contents/Home/bin/jpackage") : JPackagePath.concat("/jdk-14/bin/jpackage"),
            '--type', 'app-image',
            '--name', project.appName,
            '--vendor', "Argentum Online Libre",
            '--app-version', "${project.version}",
            '--dest', releasePath,
            '--runtime-image', prebuiltJRE,
            '--input', "${buildDir}/libs",
            '--main-class', project.mainClassName,
            '--main-jar', "${project.name}-${project.version}.jar"
    ]

    if (osName.contains('windows')) {
        commands << "--icon"
        commands << "${projectDir}/assets/data/icons/ao.ico"
    } else if (osName.contains('linux')) {
        commands << "--icon"
        commands << "${projectDir}/assets/data/icons/ao.png"
    } else if (osName.contains('mac')) {
        commands << "--icon"
        commands << "${projectDir}/assets/data/icons/ao.icns"
        commands << "--java-options"
        commands << "-XstartOnFirstThread"
    }

    commandLine = commands

    doLast() {

        copy {
            from("${projectDir}/assets")
            from("${projectDir}/Config.json")
			
            if (osName.contains('mac')) {
                into("${releasePath}/${project.appName}.app/Contents/Resources/")
            } else if (osName.contains('windows')) {
                into("${releasePath}/${project.appName}")
            } else if (osName.contains('linux')) {
            	into("${releasePath}/${project.appName}/bin")
            }
        }

        // Debloat for Windows users.
        delete fileTree("${releasePath}/${project.appName}/bin").matching { include "*.dll" exclude "applauncher.dll" }
        delete fileTree("${releasePath}/${project.appName}/app").matching { include "api*.dll" }
        delete file("${releasePath}/${project.appName}/.jpackage.xml")

        System.out.println("Application '${project.appName}' packaged.")
        System.out.println(" -> location: ${releasePath}/${project.appName}/")
    }

}
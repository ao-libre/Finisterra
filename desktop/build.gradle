apply plugin: 'application'
apply plugin: "org.mini2Dx.butler"
apply plugin: 'de.undercouch.download'

sourceCompatibility = 1.8

sourceSets {
    main.java.srcDirs = ["src/"]
    main.resources.srcDirs = ["assets/"]
}

run {
    jvmArgs += '-XstartOnFirstThread'
}

mainClassName = "launcher.DesktopLauncher"

dependencies {
    compile project(":client")
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from {
        configurations.compile.collect { zipTree(it) }

        manifest {
            attributes 'Main-Class': project.mainClassName
        }
    }
}

dist.dependsOn classes
run.dependsOn classes


    def desktopReleaseDir() { file('build/releases') }
    def releaseDir(platform) { file(desktopReleaseDir() + "/" + platform) }
    def packArgs(platform, jre) {
        [
                projectDir + "packing/packr.jar",
                "--platform", platform,
                "--jdk", projectDir + "/packing/" + jre + ".zip",
                "--executable", "AO-Java",
                "--classpath", "build/libs/desktop-0.1-SNAPSHOT.jar",
                "--mainclass", "desktop.launcher.DesktopLauncher",
                "--vmargs", "Xmx1G",
                "--output", releaseDir(platform) + (platform == "mac" ? "/AO-Java.app" : "")
        ]
    }

    task downloadReleaseUtils(type: Download) {

        download {
            src(['https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jdk_x64_windows_hotspot_8u212b04.zip',
                    'https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jdk_x86-32_windows_hotspot_8u212b04.zip',
                    'https://github.com/ojdkbuild/contrib_jdk8u-ci/releases/download/jdk8u212-b04/jdk-8u212-ojdkbuild-linux-x64.zip',
                    'https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jdk_x64_mac_hotspot_8u212b04.tar.gz',
                    'https://sourceforge.net/projects/proguard/files/latest/download',
                    'http://www.angusj.com/resourcehacker/resource_hacker.zip',
                    'https://libgdx.badlogicgames.com/ci/packr/packr.jar'])
            dest file('packing')
        }

        from zipTree('resource_hacker.zip')
        from zipTree('proguard6.1.1.zip')
        into file('packing')
    }

    task packWindows32(type: JavaExec) {
        main = "-jar"
        args = packArgs("windows32", "OpenJDK8U-jdk_x86-32_windows_hotspot_8u212b04")
    }

    task packWindows64(type: JavaExec) {
        main = "-jar"
        args = packArgs("windows64", "OpenJDK8U-jdk_x64_windows_hotspot_8u212b04")
    }

    task packMac(type: JavaExec) {
        main = "-jar"
        args = packArgs("mac", "OpenJDK8U-jdk_x64_mac_hotspot_8u212b04")
    }

    task packLinux32(type: JavaExec) {
        main = "-jar"
        args = packArgs("linux32", "openjdk-1.7.0-u80-unofficial-linux-i586-image")
    }

    task packLinux64(type: JavaExec) {
        main = "-jar"
        args = packArgs("linux64", "jdk-8u212-ojdkbuild-linux-x64")
    }

    task pack {
        dependsOn 'packWindows32'
        dependsOn 'packWindows64'
        dependsOn 'packMac'
        dependsOn 'packLinux32'
        dependsOn 'packLinux64'
        tasks.findByName('packWindows64').mustRunAfter 'packWindows32'
        tasks.findByName('packMac').mustRunAfter 'packWindows64'
        tasks.findByName('packLinux32').mustRunAfter 'packMac'
        tasks.findByName('packLinux64').mustRunAfter 'packLinux32'
    }
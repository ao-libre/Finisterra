apply plugin: 'application'
apply plugin: "org.mini2Dx.butler"
apply plugin: 'de.undercouch.download'

sourceCompatibility = 1.8

sourceSets {
    main.java.srcDirs = ["src/"]
    main.resources.srcDirs = ["assets/"]
}

run {
    jvmArgs += '-XstartOnFirstThread'
}

mainClassName = "launcher.DesktopLauncher"

dependencies {
    compile project(":client")
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from {
        configurations.compile.collect { zipTree(it) }

        manifest {
            attributes 'Main-Class': project.mainClassName
        }
    }
}

dist.dependsOn classes
run.dependsOn classes

    //task downloadReleaseUtils() {

    //    download {
    //        src(['https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jdk_x64_windows_hotspot_8u212b04.zip',
    //                'https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jdk_x86-32_windows_hotspot_8u212b04.zip',
    //                'https://github.com/ojdkbuild/contrib_jdk8u-ci/releases/download/jdk8u212-b04/jdk-8u212-ojdkbuild-linux-x64.zip',
    //                'https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u212-b04/OpenJDK8U-jdk_x64_mac_hotspot_8u212b04.tar.gz',
    //                'https://libgdx.badlogicgames.com/ci/packr/packr.jar'])
    //        dest file('packing')
    //    }
    //}

    def desktopReleaseDir() { 'build/releases/' }
    def releaseDir(platform) { desktopReleaseDir().concat(platform) }
    def packingDir() { 'packing/' }
    def switchConfig(platform) {
        def config
        switch (platform) {
            case "windows32":
                config = packingDir().concat("build-windows-32.json")
                break
            case "windows64":
                config = packingDir().concat("build-windows-64.json")
                break
            case "mac":
                config = packingDir().concat("build-mac.json")
                break
            case "linux64":
                config = packingDir().concat("build-linux.json")
                break
        }   
        config
    }   
    def packArgs(platform) {
        [
            "${projectDir}/packing/packr.jar",
            "--platform", platform,
            switchConfig(platform)
        ]
    }

    task packWindows32(type: JavaExec) {
        main = "-jar"
        args = packArgs("windows32")
    }

    task packWindows64(type: JavaExec) {
        main = "-jar"
        args = packArgs("windows64")
    }

    task packMac(type: JavaExec) {
        main = "-jar"
        args = packArgs("mac")
    }

    task packLinux64(type: JavaExec) {
        main = "-jar"
        args = packArgs("linux64")
    }

    task pack {
        //dependsOn 'build'
        dependsOn 'packWindows32'
        dependsOn 'packWindows64'
        //dependsOn 'packMac'
        dependsOn 'packLinux64'
        tasks.findByName('packWindows64').mustRunAfter 'packWindows32'
        tasks.findByName('packMac').mustRunAfter 'packWindows64'
        //tasks.findByName('packLinux64').mustRunAfter 'packMac'
    }
plugins {
    id 'application'
    id 'de.undercouch.download' version '4.0.0'
}

sourceSets {
    main.java.srcDirs = ["src/"]
    main.resources.srcDirs = ["assets/"]
}

static def osName() { System.getProperty('os.name').toLowerCase(Locale.ROOT) }
static def getJDK() { (String) org.gradle.internal.jvm.Jvm.current().getJavaHome() }
mainClassName = "launcher.DesktopLauncher"

dependencies {
    compile project(":client")
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
}

if (osName().contains('mac')) {
    run {
        jvmArgs += '-XstartOnFirstThread'
    }
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDirs)
    from { configurations.compile.collect { zipTree(it) } }

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes
run.dependsOn classes

// Determine where the JDK is going to be (Windows/Linux and Mac)
def runtimePath = "${buildDir}/jre"
if (osName().contains('mac')) {
	runtimePath = "${buildDir}/jre/contents/plugins/Java.runtime/Contents/Home"
}

// creates a replacement runtime via jlink command (much smaller than jpackage)
task jlink(type: Exec, dependsOn: dist) {

	doFirst() {
		download {

			if (osName().contains('windows')) {
				src 'https://download.java.net/java/early_access/jpackage/8/openjdk-14-jpackage+8_windows-x64_bin.zip'
			} else if (osName().contains('linux')) {
				src 'https://download.java.net/java/early_access/jpackage/8/openjdk-14-jpackage+8_linux-x64_bin.tar.gz'
			} else if (osName().contains('mac')) {
				src 'https://download.java.net/java/early_access/jpackage/8/openjdk-14-jpackage+8_osx-x64_bin.tar.gz'
			}

			dest projectDir
			overwrite false
		}

		if (!file("${projectDir}/jdk-14").exists()) {
			copy {

				if (osName().contains('windows')) {
					from zipTree("${projectDir}/openjdk-14-jpackage+8_windows-x64_bin.zip")
				} else if (osName().contains('linux')) {
					from tarTree("${projectDir}/openjdk-14-jpackage+8_linux-x64_bin.tar.gz")
				} else if (osName().contains('mac')) {
					from tarTree("${projectDir}/openjdk-14-jpackage+8_osx-x64_bin.tar.gz")
				}

				into projectDir
			}
		}
	}
	
	// Overwrite previous packaged application.
	if (file("${buildDir}/distribution/${project.appName}").exists()) {
		delete(file("${buildDir}/distribution/${project.appName}"))
	}
	
	// Overwrite previous bundled jre.
	if (file(runtimePath).exists()) {
		delete(file(runtimePath))
	}
	
	commandLine = [
			getJDK().concat("/bin/jlink"),
			'-p', getJDK().concat("/jmods"),
			'--add-modules', 'java.base,java.desktop,jdk.unsupported,java.logging',
			'--strip-debug',
			'--no-header-files',
			'--no-man-pages',
			'--strip-native-commands',
			'--vm=server',
			'--compress=2',
			'--output', runtimePath
	]

	doLast {
		// Final debloat for jpackage
		delete(file("${runtimePath}/conf"))
		delete(file("${runtimePath}/legal"))
		delete fileTree("${runtimePath}/bin").matching { include "api*.dll" }
	}
}

// creates application bundle (executable + runtime)
task appBundle(type: Exec, dependsOn: jlink) {

	def commands = [
			"${projectDir}/jdk-14/bin/jpackage",
			'--name', project.appName,
			'--vendor', "Argentum Online Libre",
			'--app-version', "${project.version}",
			'--output', "${buildDir}/distribution",
			'--runtime-image', runtimePath,
			'--input', "${buildDir}/libs",
			'--main-class', project.mainClassName,
			'--main-jar', "${project.name}-${project.version}.jar"
	]

	if (osName().contains('windows')) {
		commands << "--icon"
		commands << "${projectDir}/assets/data/icons/ao.ico"
	} else if (osName().contains('linux')) {
		commands << "--icon"
		commands << "${projectDir}/assets/data/icons/ao.png"
	} else if (osName().contains('mac')) {
		commands << "--icon"
		commands << "${projectDir}/assets/data/icons/ao.icns"
		commands << "--java-options"
		commands << "-XstartOnFirstThread"
	}

	commandLine = commands
	
	doLast() {
		copy {
			from("${projectDir}/assets")
			from("${projectDir}/Config.json")
			into("${buildDir}/distribution/${project.appName}/app")
		}

		// Debloat for Windows users.
		delete fileTree("${buildDir}/distribution/${project.appName}/bin").matching { include "*.dll" exclude "applauncher.dll"}
		delete fileTree("${buildDir}/distribution/${project.appName}/app").matching { include "api*.dll" }

		System.out.println("Application '${project.appName}' packaged.")
		System.out.println(" -> location: ${buildDir}/distribution/${project.appName}/")
	}
}

import org.gradle.internal.jvm.Jvm

plugins {
    id 'application'
    id 'de.undercouch.download'
}

sourceSets {
    main.java.srcDirs = ["src/"]
    main.resources.srcDirs = ["assets/"]
}

dependencies {
    compile project(":client")
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$freetypeVersion:natives-desktop"
}

static def osName() { System.getProperty('os.name').toLowerCase(Locale.ROOT) }
static def getJDK() { Jvm.current().getJavaHome().path }

mainClassName = "launcher.DesktopLauncher"

// Determine where the JDK is going to be (Windows/Linux and Mac)
def jdkFolder = "${projectDir}/build/jdk"
def runtimePath = osName().contains('mac') ? "${buildDir}/jre/contents/plugins/Java.runtime/Contents/Home" : "${buildDir}/jre"
def distributionPath = "${buildDir}/distribution/"
def inputPath = "${projectDir}/build/input/"
def jpackagePath = osName().contains('mac') ? "${jdkFolder}/jdk-14.jdk/Contents/Home/bin/jpackage" : "${jdkFolder}/jdk-14/bin/jpackage"
def jdkPath = osName().contains('mac') ? "${jdkFolder}/jdk-14.jdk" : "${jdkFolder}/jdk-14"

if (osName().contains('mac')) {
    run {
        jvmArgs += '-XstartOnFirstThread'
    }
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDirs)
    from { configurations.compile.collect { zipTree(it) } }

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes
run.dependsOn classes

task prepareInput(dependsOn: dist) {
    copy {
        from files(sourceSets.main.resources.srcDirs)
        from("${buildDir}/libs/" + "${project.name}-${project.version}.jar")

        into inputPath
    }
}

// creates a replacement runtime via jlink command (much smaller than jpackage)
task jlink(type: Exec, dependsOn: prepareInput) {

    doFirst {
        download {

            if (osName().contains('windows')) {
                src 'https://download.java.net/java/early_access/jpackage/8/openjdk-14-jpackage+8_windows-x64_bin.zip'
            } else if (osName().contains('linux')) {
                src 'https://download.java.net/java/early_access/jpackage/8/openjdk-14-jpackage+8_linux-x64_bin.tar.gz'
            } else if (osName().contains('mac')) {
                src 'https://download.java.net/java/early_access/jpackage/8/openjdk-14-jpackage+8_osx-x64_bin.tar.gz'
            }

            if (!file(jdkFolder).exists()) {
                file(jdkFolder).mkdirs()
            }
            dest jdkFolder
            overwrite false
        }

        if (!file(jdkPath).exists()) {
            copy {

                if (osName().contains('windows')) {
                    from zipTree("${jdkFolder}/openjdk-14-jpackage+8_windows-x64_bin.zip")
                } else if (osName().contains('linux')) {
                    from tarTree("${jdkFolder}/openjdk-14-jpackage+8_linux-x64_bin.tar.gz")
                } else if (osName().contains('mac')) {
                    from tarTree("${jdkFolder}/openjdk-14-jpackage+8_osx-x64_bin.tar.gz")
                }

                into jdkFolder
            }
        }
    }

    // Overwrite previous packaged application.
    if (file("${buildDir}/distribution/${project.appName}").exists()) {
        delete(file("${buildDir}/distribution/${project.appName}"))
    }

    // Overwrite previous bundled jre.
    if (file(runtimePath).exists()) {
        delete(file(runtimePath))
    }

    commandLine = [
            getJDK().concat("/bin/jlink"),
            '--module-path', getJDK().concat("/jmods"),
            '--add-modules', 'java.base,java.desktop,jdk.unsupported,java.logging',
            '--strip-debug',
            '--no-header-files',
            '--no-man-pages',
            '--strip-native-commands',
            '--vm=server',
            '--compress=2',
            '--output', runtimePath
    ]

    doLast {
        // Final debloat for jpackage
        delete(file("${runtimePath}/conf"))
        delete(file("${runtimePath}/legal"))
        delete fileTree("${runtimePath}/bin").matching { include "api*.dll" }
    }
}

// creates application bundle (executable + runtime)
task appBundle(type: Exec, dependsOn: jlink) {

    doFirst {
        System.out.println("Runtime Path: " + runtimePath)
        System.out.println("Distribution Path: " + distributionPath)
        System.out.println("Input Path: " + inputPath)
        System.out.println("Jpackage Path: " + jpackagePath)
        System.out.println("Jdk Path: " + jdkPath)
    }
    def mainJarFileName = "${project.name}-${project.version}.jar"
    def commands = [
            jpackagePath,
            '--name', project.appName,
            '--vendor', "Argentum Online Libre",
            '--app-version', "${project.version}",
            '--output', distributionPath,
            '--runtime-image', runtimePath,
            '--input', inputPath,
            '--main-class', project.mainClassName,
            '--main-jar', mainJarFileName
    ]

    if (osName().contains('windows')) {
        commands << "--icon"
        commands << "${projectDir}/assets/data/icons/ao.ico"
    } else if (osName().contains('linux')) {
        commands << "--icon"
        commands << "${projectDir}/assets/data/icons/ao.png"
    } else if (osName().contains('mac')) {
        commands << "--icon"
        commands << "${projectDir}/assets/data/icons/ao.icns"
        commands << "--java-options"
        commands << "-XstartOnFirstThread"
    }

    commandLine = commands

    doLast() {
        copy {
            from("${projectDir}/Config.json")
            if (osName().contains('mac')) {
                into("${distributionPath}${project.appName}.app/Contents/Resources/")
            } else {
                into("${distributionPath}${project.appName}/app")
            }
        }

        // Debloat for Windows users.
        delete fileTree("${distributionPath}/${project.appName}/bin").matching { include "*.dll" exclude "applauncher.dll" }
        delete fileTree("${distributionPath}/${project.appName}/app").matching { include "api*.dll" }

        System.out.println("Application '${project.appName}' packaged.")
        System.out.println(" -> location: ${distributionPath}${project.appName}/")
    }
}
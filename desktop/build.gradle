import org.gradle.internal.jvm.Jvm

plugins {
    id 'application'
    id 'de.undercouch.download'
}

sourceSets {
    main.java.srcDirs = ["src/"]
    main.resources.srcDirs = ["assets/"]
}

dependencies {
    compile project(":client")
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$freetypeVersion:natives-desktop"
}

static def osName() { System.getProperty('os.name').toLowerCase(Locale.ROOT) }
static def getJDK() { Jvm.current().getJavaHome().path }

mainClassName = "launcher.DesktopLauncher"

if (osName().contains('mac')) {
    run {
        jvmArgs += '-XstartOnFirstThread'
    }
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDirs)
    from { configurations.compile.collect { zipTree(it) } }

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

tasks.dist.doLast {

    // We copy all the dependencies .JAR into the input folder for JPackage.
	copy {
        from configurations.runtime
		into "${buildDir}/libs"
	}

}

dist.dependsOn(classes)
run.dependsOn(classes)

// Determine where the JDK is going to be (Windows/Linux and Mac)
def JPackagePath = "${projectDir}/jdk-14"
def prebuiltJRE = "${projectDir}/bundled-JRE"
def releasePath = "${buildDir}/releases"

// Downloads the JPackage binary and decompresses it.
task downloadJPackage(type: Download, dependsOn: dist) {

    if (osName().contains('windows')) {
        src 'https://download.java.net/java/early_access/jpackage/1/openjdk-14-jpackage+1-49_windows-x64_bin.zip'
    } else if (osName().contains('linux')) {
        src 'https://download.java.net/java/early_access/jpackage/1/openjdk-14-jpackage+1-49_linux-x64_bin.tar.gz'
    } else if (osName().contains('mac')) {
        src 'https://download.java.net/java/early_access/jpackage/1/openjdk-14-jpackage+1-49_osx-x64_bin.tar.gz'
    }

    dest(new File(projectDir, 'jpackage.zip'))
    overwrite(false)

    // We put it in a doLast{} block because otherwise it (the task) auto-executes.
    doLast {
        if (!file(JPackagePath).exists()) {
            copy {
                from zipTree("${projectDir}/jpackage.zip")
                into "${projectDir}"
            }
        }
    }

}

// creates a replacement runtime via jlink command (much smaller than JPackage. Up to 38MB)
task jlink(type: Exec, dependsOn: downloadJPackage) {

    // Overwrite previous bundled jre.
    if (file(prebuiltJRE).exists()) {
        delete(file(prebuiltJRE))
    }

    commandLine = [
            getJDK().concat("/bin/jlink"),
            '--module-path', getJDK().concat("/jmods"),
            '--add-modules', 'java.base,java.desktop,jdk.unsupported,java.logging',
            '--strip-debug',
            '--no-header-files',
            '--no-man-pages',
            '--strip-native-commands',
            '--vm=server',
            '--compress=2',
            '--output', prebuiltJRE
    ] as List<String>

    doLast {
        // Some extra debloat.
        delete(file("${prebuiltJRE}/conf"))
        delete(file("${prebuiltJRE}/legal"))
        delete fileTree("${prebuiltJRE}/bin").matching { include "api*.dll" }
    }

}

// creates application bundle (executable + runtime)
task appBundle(type: Exec, dependsOn: jlink) {

    // Overwrite previous bundled application.
    if (file(releasePath).exists()) {
        delete(file(releasePath))
    } else {
        file(releasePath).mkdirs()
    }

    def commands = [
            JPackagePath.concat("/bin/jpackage"),
            '--package-type', 'app-image',
            '--name', project.appName,
            '--vendor', "Argentum Online Libre",
            '--app-version', "${project.version}",
            '--dest', releasePath,
            '--runtime-image', prebuiltJRE,
            '--input', "${buildDir}/libs",
            '--main-class', project.mainClassName,
            '--main-jar', "${project.name}-${project.version}.jar"
    ]

    if (osName().contains('windows')) {
        commands << "--icon"
        commands << "${projectDir}/assets/data/icons/ao.ico"
    } else if (osName().contains('linux')) {
        commands << "--icon"
        commands << "${projectDir}/assets/data/icons/ao.png"
    } else if (osName().contains('mac')) {
        commands << "--icon"
        commands << "${projectDir}/assets/data/icons/ao.icns"
        commands << "--java-options"
        commands << "-XstartOnFirstThread"
    }

    commandLine = commands

    doLast() {

        copy {
            from("${projectDir}/assets")
            from("${projectDir}/Config.json")
            if (osName().contains('mac')) {
                into("${releasePath}/${project.appName}/Contents/Resources/")
            } else {
                into("${releasePath}/${project.appName}")
            }
        }

        // Debloat for Windows users.
        delete fileTree("${releasePath}/${project.appName}/bin").matching { include "*.dll" exclude "applauncher.dll" }
        delete fileTree("${releasePath}/${project.appName}/app").matching { include "api*.dll" }
        delete file("${releasePath}/${project.appName}/.jpackage.xml")

        System.out.println("Application '${project.appName}' packaged.")
        System.out.println(" -> location: ${releasePath}/${project.appName}/")
    }

}
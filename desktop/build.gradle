import groovy.json.JsonSlurper

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'de.undercouch.download'
apply plugin: 'com.github.breadmoirai.github-release'
apply plugin: 'org.beryx.jlink'

sourceSets {
    main.java.srcDirs = ["src/"]
    main.resources.srcDirs = ["assets/"]
}

def osName() { System.getProperty('os.name').toLowerCase(Locale.ROOT) }

if (osName().contains('mac')) {
	run {
		jvmArgs += '-XstartOnFirstThread'
	}
}

mainClassName = "launcher.DesktopLauncher"

dependencies {
    compile project(":client")
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDirs)
    from { configurations.compile.collect { zipTree(it) } }

    manifest {
        attributes ('Main-Class': project.mainClassName, 'SplashScreen-Image' : "${project.projectDir}/assets/data/icons/ao.png")
    }
}

dist.dependsOn classes
run.dependsOn classes

def releasesDir() { "${projectDir}/build/releases/" }
def packingDir() { "${projectDir}/jpackage/" }

githubRelease {
    //token project.property('github.token')
    owner "ao-libre"
    repo "ao-java"
    targetCommitish "master"
    draft false
    prerelease true
    releaseAssets project.file('build/zip/').listFiles()
    apiEndpoint "https://api.github.com"
}

task downloadBinaries(type: Download) {

    if (osName().contains('windows')) {
	src "https://download.java.net/java/early_access/jpackage/8/openjdk-14-jpackage+8_windows-x64_bin.zip"
    
    } else if (osName().contains('linux')) {
            src "https://download.java.net/java/early_access/jpackage/8/openjdk-14-jpackage+8_linux-x64_bin.tar.gz"

    } else if (osName().contains('mac')) {
            src "https://download.java.net/java/early_access/jpackage/8/openjdk-14-jpackage+8_osx-x64_bin.tar.gz"
    
    }

    dest packingDir().concat("zip")
    overwrite false
}

task uncompressBinaries(dependsOn: downloadBinaries, type: Copy) {

    if (osName().contains('windows')) {
        from zipTree(file(packingDir().concat("zip/openjdk-14-jpackage+8_windows-x64_bin.zip")))
    
    } else if (osName().contains('linux')) {
	from tarTree(file(packingDir().concat("zip/openjdk-14-jpackage+8_linux-x64_bin.tar.gz")))
    
    } else if (osName().contains('mac')) {
	from tarTree(file(packingDir().concat("zip/openjdk-14-jpackage+8_osx-x64_bin.tar.gz")))
    }
	    
    into packingDir()

}

// creates application bundle (executable + runtime)
task jpackageStart(type: Exec, dependsOn: dist) {
    workingDir project.projectDir
    def commands = [
        "${project.projectDir}/jpackage/jdk-14/bin/jpackage",
        '--output', "${buildDir}/releases",
        '--input', "${buildDir}/libs",
        '--name', project.appName,
        '--main-class', project.mainClassName,
        '--main-jar', "desktop-${project.version}.jar"
    ]
    
    if (osName().contains('windows')) {
        commands << '--icon'
        commands << "${project.projectDir}/assets/data/icons/ao.ico"
        commands << '--java-options'
        commands << "-splash:ao.ico"
    } else if (osName().contains('linux')) {
        commands << '--icon'
        commands << "${project.projectDir}/assets/data/icons/ao.png"
        commands << '--java-options'
        commands << "-splash:ao.png"
    } else if (osName().contains('mac')) {
        commands << '--icon'
        commands << "${project.projectDir}/assets/data/icons/ao.icns"
        commands << '--java-options'
        commands << "-XstartOnFirstThread"
    }
    
    commandLine = commands
}

// removes bloated runtime created by jpackage
task jpackageCleanRuntime(dependsOn: jpackageStart) {
    doLast() {
        File runtimeFile = new File("${buildDir}/distribution/${project.appName}/runtime")
        if (osName().contains('mac')) {
            runtimeFile = new File("${buildDir}/distribution/${project.appName}.app/contents/plugins/Java.runtime/Contents/Home")
        }
        runtimeFile.deleteDir()
        delete {
            delete fileTree("${buildDir}/distribution/${project.appName}").matching {
                include "api*.dll"
            }
        }
        System.out.println("deleting bloated runtime in " + runtimeFile)
    }
}

// creates a replacement runtime via jlink command (much smaller than jpackager)
task jpackageAppBundle(type: Exec, dependsOn: [jpackageCleanRuntime]) {
    String runtimePath = "${buildDir}/distribution/${project.appName}/runtime"
    if (osName().contains('mac')) {
        runtimePath = "${buildDir}/distribution/${project.appName}.app/contents/plugins/Java.runtime/Contents/Home"
    }

    workingDir project.projectDir
    commandLine = [
        "${project.projectDir}/jpackage/jdk-14/bin/jlink",
        '-p', "${project.projectDir}/jpackage/jmods",
        '--add-modules', 'java.base,java.desktop,jdk.unsupported',
        '--strip-debug',
        '--no-header-files',
        '--no-man-pages',
        '--strip-native-commands',
        "--vm=server",
        "--compress=2",
        '--output', runtimePath
    ]
    
    doLast{
        System.out.println("Application '${project.appName}' packaged.")
        System.out.println(" -> location: ${buildDir}/distribution/${project.appName}/")
    }
}

githubRelease {
    //token project.property('github.token')
    owner "ao-libre"
    repo "ao-java"
    targetCommitish "master"
    draft false
    prerelease true
    releaseAssets project.file('build/zip/').listFiles()
    apiEndpoint "https://api.github.com"
}

plugins {
    id 'application'
    id 'de.undercouch.download' version '4.0.0'
    id 'com.github.breadmoirai.github-release' version '2.2.9'
    id 'org.beryx.runtime' version '1.2.0'
}

sourceSets {
    main.java.srcDirs = ["src/"]
    main.resources.srcDirs = ["assets/"]
}

static def osName() { System.getProperty('os.name').toLowerCase(Locale.ROOT) }
def releasesDir = "${buildDir}/releases"
mainClassName = "launcher.DesktopLauncher"

dependencies {
    compile project(":client")
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
}

if (osName().contains('mac')) {
    run {
        jvmArgs += '-XstartOnFirstThread'
    }
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDirs)
    from { configurations.compile.collect { zipTree(it) } }

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes
run.dependsOn classes

// creates application bundle (executable + runtime)
task jpackageStart(type: Exec, dependsOn: dist) {

	doFirst() {
		delete("${buildDir}/distribution/$project.appName")
	}

	workingDir projectDir
	def commands = [
			"${projectDir}/jdk-14/bin/jpackage",
			'--output', "${buildDir}/distribution",
			'--input', "${buildDir}/libs",
			'--name', project.appName,
			'--main-class', project.mainClassName,
			'--main-jar', "${project.name}-${project.version}.jar"
	]

	if (osName().contains('windows')) {
		commands << '--icon'
		commands << "${projectDir}/assets/ao.ico"
	} else if (osName().contains('linux')) {
		commands << '--icon'
		commands << "${projectDir}/assets/ao.png"
	} else if (osName().contains('mac')) {
		commands << '--icon'
		commands << "${projectDir}/assets/ao.icns"
	}

	commandLine = commands

	doLast() {
		if (!osName().contains('mac')) {
			copy {
				from "${projectDir}/assets/ao.png"
				into "${buildDir}/distribution/${project.appName}/app"
			}
		}
	}
}

// removes bloated runtime created by javapackager
task jpackageCleanRuntime(dependsOn: jpackageStart) {
	doLast() {
		File runtimeFile = file("${buildDir}/distribution/${project.appName}/runtime")
		if (osName().contains('mac')) {
			runtimeFile = file("${buildDir}/distribution/${project.appName}.app/contents/plugins/Java.runtime/Contents/Home")
		}

		delete(runtimeFile)

		delete fileTree("${buildDir}/distribution/${project.appName}").matching {
			include "api*.dll"
		}

		System.out.println("Deleting bloated runtime in " + runtimeFile)
	}
}

// creates a replacement runtime via jlink command (much smaller than jpackage)
task jpackageAppBundle(type: Exec, dependsOn: [jpackageCleanRuntime]) {
	String runtimePath = "${buildDir}/distribution/${project.appName}/runtime"
	if (osName().contains('mac')) {
		runtimePath = "${buildDir}/distribution/${project.appName}.app/contents/plugins/Java.runtime/Contents/Home"
	}

	workingDir projectDir
	commandLine = [
			"${projectDir}/jdk-14/bin/jlink",
			'-p', "${projectDir}/jdk-14/jmods",
			'--add-modules', 'java.base,java.desktop,jdk.unsupported,java.logging',
			'--strip-debug',
			'--no-header-files',
			'--no-man-pages',
			'--strip-native-commands',
			"--vm=server",
			"--compress=2",
			'--output', runtimePath
	]

	doLast{

        copy {
			from("${projectDir}/assets")
			into("${buildDir}/distribution/${project.appName}/app/assets")
		}
		
		System.out.println("Application '${project.appName}' packaged.")
		System.out.println(" -> location: ${buildDir}/distribution/${project.appName}/")
	}
}

tasks.jpackageStart.doFirst {
	
	download {

		if (osName().contains('windows')) {
			src 'https://download.java.net/java/early_access/jpackage/8/openjdk-14-jpackage+8_windows-x64_bin.zip'
		} else if (osName().contains('linux')) {
			src 'https://download.java.net/java/early_access/jpackage/8/openjdk-14-jpackage+8_linux-x64_bin.tar.gz'
		} else if (osName().contains('mac')) {
			src 'https://download.java.net/java/early_access/jpackage/8/openjdk-14-jpackage+8_osx-x64_bin.tar.gz'
		}
		
		dest projectDir
		overwrite false
	}
	
	if (!file("${projectDir}/jdk-14").exists()) {
		copy {
			
			if (osName().contains('windows')) {
				from zipTree("${projectDir}/openjdk-14-jpackage+8_windows-x64_bin.zip")
			} else if (osName().contains('linux')) {
				from tarTree("${projectDir}/openjdk-14-jpackage+8_linux-x64_bin.tar.gz")
			} else if (osName().contains('mac')) {
				from tarTree("${projectDir}/openjdk-14-jpackage+8_osx-x64_bin.tar.gz")
			}
			
			into projectDir
		}
	}
}
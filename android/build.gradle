/**
 * The first line in the build configuration applies the Android plugin for
 * Gradle to this build and makes the android block available to specify
 * Android-specific build options.
 */

plugins {
	id 'android'
	id 'com.android.application'
}

configurations {natives}

/**
* The android block is where you configure all your Android-specific
* build options.
*/

android {

	sourceSets {
		main {
			java.srcDirs = ["src/"]
			resources.srcDirs = ["assets/"]
			manifest.srcFile 'AndroidManifest.xml'
			aidl.srcDirs = ['src/']
			renderscript.srcDirs = ['src/']
			res.srcDirs = ['res']
			jniLibs.srcDirs = ['libs']
		}		
	}
	
	compileOptions {
		sourceCompatibility = JavaVersion.VERSION_12
		targetCompatibility = JavaVersion.VERSION_12
	}

	/**
	* compileSdkVersion specifies the Android API level Gradle should use to
	* compile your app. This means your app can use the API features included in
	* this API level and lower.
	*/
	compileSdkVersion 28

	/**
	* buildToolsVersion specifies the version of the SDK build tools, command-line
	* utilities, and compiler that Gradle should use to build your app. You need to
	* download the build tools using the SDK Manager.
	*
	* This property is optional because the plugin uses a recommended version of
	* the build tools by default.
	*/
	buildToolsVersion "29.0.0"

	/**
	* The defaultConfig block encapsulates default settings and entries for all
	* build variants, and can override some attributes in main/AndroidManifest.xml
	* dynamically from the build system. You can configure product flavors to override
	* these values for different versions of your app.
	*/
	defaultConfig {

		/**
		* applicationId uniquely identifies the package for publishing.
		* However, your source code should still reference the package name
		* defined by the package attribute in the main/AndroidManifest.xml file.
		*/

		applicationId 'world.finisterra.client'

		// Defines the minimum API level required to run the app.
		minSdkVersion 19

		// Specifies the API level used to test the app.
		targetSdkVersion 28

		// Defines the version number of your app.
		versionCode 1

		// Defines a user-friendly version name for your app.
		versionName "0.1.12"
	}

	/**
	* The buildTypes block is where you can configure multiple build types.
	* By default, the build system defines two build types: debug and release. The
	* debug build type is not explicitly shown in the default build configuration,
	* but it includes debugging tools and is signed with the debug key. The release
	* build type applies Proguard settings and is not signed by default.
	*/
	buildTypes {

		/**
		* By default, Android Studio configures the release build type to enable code
		* shrinking, using minifyEnabled, and specifies the Proguard settings file.
		*/

		release {
			minifyEnabled true // Enables code shrinking for the release build type.
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	/**
	* The productFlavors block is where you can configure multiple product flavors.
	* This allows you to create different versions of your app that can
	* override the defaultConfig block with their own settings. Product flavors
	* are optional, and the build system does not create them by default.
	*
	* This example creates a free and paid product flavor. Each product flavor
	* then specifies its own application ID, so that they can exist on the Google
	* Play Store, or an Android device, simultaneously.
	*
	* If you declare product flavors, you must also declare flavor dimensions
	* and assign each flavor to a flavor dimension.
	*/
	flavorDimensions "tier"
	
	productFlavors {
		free {
			dimension "tier"
			applicationId 'world.finisterra.client'
		}
	}

	/**
	* The splits block is where you can configure different APK builds that
	* each contain only code and resources for a supported screen density or
	* ABI. You'll also need to configure your build so that each APK has a
	* different versionCode.
	*/
	splits {
		// Settings to build multiple APKs based on screen density.
		density {

			// Enable or disable building multiple APKs.
			enable false

			// Exclude these densities when building multiple APKs.
			exclude "ldpi", "tvdpi", "xxxhdpi", "400dpi", "560dpi"
		}
	 }
  
	packagingOptions {
		// Preventing from license violations (more or less):
		pickFirst 'META-INF/LICENSE.txt'
		pickFirst 'META-INF/LICENSE'
		pickFirst 'META-INF/license.txt'
		pickFirst 'META-INF/LGPL2.1'
		pickFirst 'META-INF/NOTICE.txt'
		pickFirst 'META-INF/NOTICE'
		pickFirst 'META-INF/notice.txt'
		
		// Excluding unnecessary meta-data:
		exclude 'META-INF/robovm/ios/robovm.xml'
		exclude 'META-INF/DEPENDENCIES.txt'
		exclude 'META-INF/DEPENDENCIES'
		exclude 'META-INF/dependencies.txt'
	}
}

/**
* The dependencies block in the module-level build configuration file
* specifies dependencies required to build only the module itself.
* To learn more, go to Add build dependencies.
*/
dependencies {
	implementation project(':client')
	api "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
	api "com.badlogicgames.gdx:gdx-controllers-android:$gdxVersion"

	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"
	natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
	natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
	natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-arm64-v8a"
	natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
	natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86_64"
	
	implementation fileTree(include: ['*.jar'], dir: 'libs')
}

// Called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
	doFirst {
		file("libs/armeabi/").mkdirs()
		file("libs/armeabi-v7a/").mkdirs()
		file("libs/arm64-v8a/").mkdirs()
		file("libs/x86_64/").mkdirs()
		file("libs/x86/").mkdirs()
		
		configurations.natives.files.each { jar ->
			def outputDir = null
			if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
			if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
			if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
			if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
			if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
			if(outputDir != null) {
				copy {
					from zipTree(jar)
					into outputDir
					include "*.so"
				}
			}
		}
	}
}

preBuild.dependsOn(copyAndroidNatives)

task run(type: Exec) {
	def path
	def localProperties = project.file("../local.properties")
	if (localProperties.exists()) {
		Properties properties = new Properties()
		localProperties.withInputStream { instr ->
			properties.load(instr)
		}
		def sdkDir = properties.getProperty('sdk.dir')
		if (sdkDir) {
			path = sdkDir
		} else {
			path = "$System.env.ANDROID_HOME"
		}
	} else {
		path = "$System.env.ANDROID_HOME"
	}

	def adb = path + "/platform-tools/adb"
	commandLine "$adb", 'shell', 'am', 'start', '-n', 'launcher/launcher.AndroidLauncher'
}